#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
REGISTRY_USER="admin"
REGISTRY_DATA_PATH="/mnt/volume-fsn1-1/docker-registry"
VPN_IP="10.0.2.1"     # Your server's VPN IP
REGISTRY_PORT="30500" # NodePort for direct access
WORK_DIR="/tmp/registry-setup-$$"

# Functions
log_info() {
	echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
	echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
	echo -e "${RED}[ERROR]${NC} $1"
}

cleanup() {
	log_info "Cleaning up temporary files..."
	rm -rf "$WORK_DIR"
}

trap cleanup EXIT

# Check prerequisites
check_prerequisites() {
	log_info "Checking prerequisites..."

	# Check if running as root
	if [[ $EUID -ne 0 ]]; then
		log_error "This script must be run as root"
		exit 1
	fi

	# Check if kubectl is available
	if ! command -v kubectl &>/dev/null; then
		log_error "kubectl is not installed"
		exit 1
	fi

	# Check if helm is available
	if ! command -v helm &>/dev/null; then
		log_error "helm is not installed"
		exit 1
	fi

	# Check if external volume is mounted
	if ! mountpoint -q /mnt/volume-fsn1-1; then
		log_error "External volume /mnt/volume-fsn1-1 is not mounted"
		exit 1
	fi

	# Check if k3s is running
	if ! kubectl get nodes &>/dev/null; then
		log_error "k3s is not running or kubectl is not configured"
		exit 1
	fi

	log_info "All prerequisites met"
}

# Setup working directory
setup_workdir() {
	log_info "Setting up working directory..."
	mkdir -p "$WORK_DIR"
	cd "$WORK_DIR"
}

# Create registry data directory
create_registry_directory() {
	log_info "Creating registry data directory..."
	mkdir -p "$REGISTRY_DATA_PATH"
	chmod 777 "$REGISTRY_DATA_PATH"
}

# Add Helm repository
add_helm_repo() {
	log_info "Adding Docker Registry Helm repository..."
	helm repo add twuni https://helm.twun.io
	helm repo update
}

# Generate registry credentials
generate_credentials() {
	log_info "Generating registry credentials..."

	# Generate random password
	REGISTRY_PASSWORD=$(head -c 16 /dev/urandom | base64 | tr -d "=+/" | cut -c1-25)

	# Save credentials
	echo "$REGISTRY_USER" >registry-creds.txt
	echo "$REGISTRY_PASSWORD" >>registry-creds.txt

	if command -v htpasswd &>/dev/null; then
		htpasswd -Bbn "$REGISTRY_USER" "$REGISTRY_PASSWORD" >htpasswd
	else
		# Install apache2-utils for htpasswd
		log_info "Installing apache2-utils for htpasswd..."
		apt-get update && apt-get install -y apache2-utils
		htpasswd -Bbn "$REGISTRY_USER" "$REGISTRY_PASSWORD" >htpasswd
	fi

	log_info "Registry credentials generated"
}

create_pvc() {
	log_info "Applying PersistentVolume and checking PersistentVolumeClaim..."

	# Split the manifests into two separate files in the temp directory
	PV_MANIFEST="pv.yaml"
	PVC_MANIFEST="pvc.yaml"

	# PersistentVolume Manifest
	cat >"$PV_MANIFEST" <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: registry-pv
spec:
  storageClassName: manual
  capacity:
    storage: 1000Gi
  accessModes: [ReadWriteOnce]
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "$REGISTRY_DATA_PATH"
EOF

	# PersistentVolumeClaim Manifest
	cat >"$PVC_MANIFEST" <<EOF
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: registry-pvc
spec:
  storageClassName: manual
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 1000Gi
  volumeName: registry-pv
EOF

	log_info "Applying PersistentVolume manifest..."
	# Applying the PV is always safe and idempotent.
	kubectl apply -f "$PV_MANIFEST"

	log_info "Checking if PersistentVolumeClaim 'registry-pvc' exists..."
	# Check if the PVC already exists. We use `get` which is a read-only operation.
	if kubectl get pvc registry-pvc &>/dev/null; then
		log_info "PVC 'registry-pvc' already exists. Skipping creation."
	else
		log_warn "PVC 'registry-pvc' not found. Creating it now."
		# Only create the PVC if it doesn't exist. This avoids the immutable field error.
		kubectl create -f "$PVC_MANIFEST"
	fi
}

# Install registry using Helm with NodePort
install_registry() {
	log_info "Installing Docker Registry using Helm..."

	# Check if already installed
	if helm list | grep -q "private-registry"; then
		log_warn "Registry already installed, upgrading..."
		HELM_CMD="upgrade"
	else
		HELM_CMD="install"
	fi

	helm $HELM_CMD private-registry twuni/docker-registry \
		--set persistence.enabled=true \
		--set persistence.deleteEnabled=true \
		--set persistence.existingClaim=registry-pvc \
		--set secrets.htpasswd="$(cat htpasswd)" \
		--set securityContext.enabled=false \
		--set service.type=NodePort \
		--set service.nodePort=$REGISTRY_PORT \
		--set tlsSecretName="" \
		--set configData.http.tls.enabled=false \
		--set garbageCollect.enabled=true \
		--set garbageCollect.schedule="0 3 * * 0" # Runs every Sunday at 3 AM

	# Wait for registry to be ready
	log_info "Waiting for registry deployment to be ready..."
	kubectl rollout status deployment/private-registry-docker-registry --timeout=300s
}

# Create docker registry secret
create_docker_secret() {
	log_info "Creating Docker registry secret for Kubernetes..."

	# Delete existing secret if it exists
	kubectl delete secret private-registry --ignore-not-found=true

	kubectl create secret docker-registry private-registry \
		--docker-server="$VPN_IP:$REGISTRY_PORT" \
		--docker-username="$REGISTRY_USER" \
		--docker-password="$REGISTRY_PASSWORD"
}

# Configure firewall to restrict registry access
configure_firewall() {
	log_info "Configuring firewall to restrict registry access to VPN only..."

	# Allow registry port only from VPN network
	ufw allow from 10.0.2.0/24 to any port $REGISTRY_PORT

	# Deny from all other sources
	ufw deny $REGISTRY_PORT
}

# Save credentials and create helper scripts
save_credentials() {
	log_info "Saving credentials and creating helper scripts..."

	# Create directory for registry configs
	REGISTRY_CONFIG_DIR="/root/registry-config"
	mkdir -p "$REGISTRY_CONFIG_DIR"

	# Copy credentials
	cp registry-creds.txt "$REGISTRY_CONFIG_DIR/"

	# Create login script
	cat >"$REGISTRY_CONFIG_DIR/login.sh" <<EOF
#!/usr/bin/env bash
set -euo pipefail

DOCKER_USERNAME="admin"
SERVER="$VPN_IP:$REGISTRY_PORT"
CREDS_FILE="\$(dirname "\$0")/registry-creds.txt"

if [ ! -f "\$CREDS_FILE" ]; then
    echo "Error: Credentials file not found at \$CREDS_FILE"
    exit 1
fi

# Check if docker is available
if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed"
    echo "Install with: curl -fsSL https://get.docker.com | sudo sh"
    exit 1
fi

tail -n1 "\$CREDS_FILE" | docker login "\$SERVER" --username "\$DOCKER_USERNAME" --password-stdin
EOF

	chmod +x "$REGISTRY_CONFIG_DIR/login.sh"

	# Create push example script
	cat >"$REGISTRY_CONFIG_DIR/push-example.sh" <<EOF
#!/usr/bin/env bash
set -euo pipefail

# Example of how to push an image to the private registry
# Usage: ./push-example.sh <image-name>

if [ \$# -eq 0 ]; then
    echo "Usage: \$0 <image-name>"
    echo "Example: \$0 nginx:latest"
    exit 1
fi

SOURCE_IMAGE="\$1"
REGISTRY="$VPN_IP:$REGISTRY_PORT"

# Extract image name without registry/tag
IMAGE_NAME=\$(echo "\$SOURCE_IMAGE" | sed 's/.*\///' | sed 's/:.*$//')
IMAGE_TAG=\$(echo "\$SOURCE_IMAGE" | grep ':' | sed 's/.*://' || echo "latest")

TARGET_IMAGE="\$REGISTRY/\$IMAGE_NAME:\$IMAGE_TAG"

echo "Pulling \$SOURCE_IMAGE..."
docker pull "\$SOURCE_IMAGE"

echo "Tagging as \$TARGET_IMAGE..."
docker tag "\$SOURCE_IMAGE" "\$TARGET_IMAGE"

echo "Pushing to private registry..."
docker push "\$TARGET_IMAGE"

echo "Done! Image available at: \$TARGET_IMAGE"
EOF

	chmod +x "$REGISTRY_CONFIG_DIR/push-example.sh"

	# Save registry info
	cat >"$REGISTRY_CONFIG_DIR/registry-info.txt" <<EOF
Private Docker Registry Information
===================================

Registry URL: $VPN_IP:$REGISTRY_PORT
Username: $REGISTRY_USER
Password: $(tail -n1 registry-creds.txt)

Access: VPN-only (Direct IP access)

Login command:
  $REGISTRY_CONFIG_DIR/login.sh

Push example:
  $REGISTRY_CONFIG_DIR/push-example.sh nginx:latest

Use in Kubernetes:
  imagePullSecrets:
    - name: private-registry

Note: This registry uses HTTP (not HTTPS) and is configured
as an insecure registry in Docker daemon.
EOF

	log_info "Credentials saved to $REGISTRY_CONFIG_DIR/"
}

# Test registry access
test_registry() {
	log_info "Testing registry access..."

	# Wait for service to be ready
	sleep 5

	# Test with curl
	if curl -s -o /dev/null -w "%{http_code}" "http://$VPN_IP:$REGISTRY_PORT/v2/" -u "$REGISTRY_USER:$REGISTRY_PASSWORD" | grep -q "200\|401"; then
		log_info "Registry is accessible via HTTP"
	else
		log_warn "Registry might not be ready yet"
	fi
}

# Main execution
main() {
	log_info "Starting private Docker registry setup (VPN IP-only access)..."

	check_prerequisites
	setup_workdir
	create_registry_directory
	add_helm_repo
	generate_credentials
	create_pvc
	install_registry
	create_docker_secret
	configure_firewall
	save_credentials
	test_registry

	log_info "Private Docker registry setup complete!"
	log_info ""
	log_info "Registry Details:"
	log_info "  URL: $VPN_IP:$REGISTRY_PORT"
	log_info "  Username: $REGISTRY_USER"
	log_info "  Password: Saved in /root/registry-config/registry-creds.txt"
	log_info ""
	log_info "To login to the registry:"
	log_info "  /root/registry-config/login.sh"
	log_info ""
	log_info "Note: Registry is only accessible through WireGuard VPN"
	log_info "      Using HTTP (insecure) - configured in Docker daemon"
}

# Run main function
main
