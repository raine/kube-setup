#!/bin/bash
# WireGuard VPN Setup Script
# This script sets up WireGuard to allow accessing Kubernetes, PostgreSQL, and SSH only through VPN

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}=== WireGuard VPN Setup ===${NC}"

# Check if running as root
if [ "$EUID" -ne 0 ]; then
	echo -e "${RED}Please run as root (use sudo)${NC}"
	exit 1
fi

# Variables
WG_DIR="/etc/wireguard"
WG_INTERFACE="wg0"
SERVER_IP="10.0.1.1"
CLIENT_IP="10.0.1.2"
LISTEN_PORT="51820"

# Install WireGuard
echo -e "${YELLOW}Installing WireGuard...${NC}"
apt update
apt install -y wireguard qrencode

# Create WireGuard directory and generate keys
echo -e "${YELLOW}Generating keys...${NC}"
cd $WG_DIR

# Generate server keys
wg genkey | tee server_private.key | wg pubkey | tee server_public.key >/dev/null
chmod 600 server_private.key

# Generate client keys
wg genkey | tee client_private.key | wg pubkey | tee client_public.key >/dev/null
chmod 600 client_private.key

# Get keys
SERVER_PRIVATE_KEY=$(cat server_private.key)
SERVER_PUBLIC_KEY=$(cat server_public.key)
CLIENT_PRIVATE_KEY=$(cat client_private.key)
CLIENT_PUBLIC_KEY=$(cat client_public.key)

# Get the main network interface (usually eth0 or ens3)
MAIN_INTERFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
echo -e "${YELLOW}Detected main network interface: ${MAIN_INTERFACE}${NC}"

# Create server configuration
echo -e "${YELLOW}Creating server configuration...${NC}"
cat >${WG_INTERFACE}.conf <<EOF
[Interface]
PrivateKey = ${SERVER_PRIVATE_KEY}
Address = ${SERVER_IP}/24
ListenPort = ${LISTEN_PORT}
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o ${MAIN_INTERFACE} -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o ${MAIN_INTERFACE} -j MASQUERADE

[Peer]
PublicKey = ${CLIENT_PUBLIC_KEY}
AllowedIPs = ${CLIENT_IP}/32
EOF

chmod 600 ${WG_INTERFACE}.conf

# Enable IP forwarding
echo -e "${YELLOW}Enabling IP forwarding...${NC}"
sysctl -w net.ipv4.ip_forward=1
echo "net.ipv4.ip_forward=1" >>/etc/sysctl.conf

# Start and enable WireGuard
echo -e "${YELLOW}Starting WireGuard...${NC}"
systemctl enable wg-quick@${WG_INTERFACE}
systemctl start wg-quick@${WG_INTERFACE}

# Configure UFW firewall
echo -e "${YELLOW}Configuring firewall...${NC}"
ufw allow ${LISTEN_PORT}/udp comment "WireGuard"
ufw route allow in on ${WG_INTERFACE}
ufw route allow out on ${WG_INTERFACE}

# Allow services only from VPN
ufw allow from ${SERVER_IP%.*}.0/24 to any port 6443 comment "Kubernetes API via VPN"
ufw allow from ${SERVER_IP%.*}.0/24 to any port 22 comment "SSH via VPN"
ufw allow from ${SERVER_IP%.*}.0/24 to any port 5432 comment "PostgreSQL via VPN"

# Get server endpoint
SERVER_ENDPOINT=$(curl -s ifconfig.me)

# Create client configuration
echo -e "${YELLOW}Creating client configuration...${NC}"
CLIENT_CONFIG_FILE="client.conf"
cat >${CLIENT_CONFIG_FILE} <<EOF
[Interface]
PrivateKey = ${CLIENT_PRIVATE_KEY}
Address = ${CLIENT_IP}/24
DNS = 1.1.1.1

[Peer]
PublicKey = ${SERVER_PUBLIC_KEY}
Endpoint = ${SERVER_ENDPOINT}:${LISTEN_PORT}
AllowedIPs = ${SERVER_IP%.*}.0/24
PersistentKeepalive = 25
EOF

# Generate QR code for mobile clients
echo -e "${YELLOW}Generating QR code for mobile clients...${NC}"
qrencode -t ansiutf8 <${CLIENT_CONFIG_FILE}

# Show status
echo -e "${GREEN}=== WireGuard Setup Complete ===${NC}"
echo ""
echo -e "${YELLOW}Server Information:${NC}"
echo "  Interface: ${WG_INTERFACE}"
echo "  Server IP: ${SERVER_IP}"
echo "  Listen Port: ${LISTEN_PORT}"
echo "  Public Key: ${SERVER_PUBLIC_KEY}"
echo ""
echo -e "${YELLOW}Client Configuration:${NC}"
echo "  Client config saved to: ${WG_DIR}/${CLIENT_CONFIG_FILE}"
echo "  Client IP: ${CLIENT_IP}"
echo ""
echo -e "${YELLOW}Firewall Rules Added:${NC}"
echo "  - WireGuard port: ${LISTEN_PORT}/udp"
echo "  - Kubernetes API: 6443 (VPN only)"
echo "  - SSH: 22 (VPN only)"
echo "  - PostgreSQL: 5432 (VPN only)"
echo ""
echo -e "${GREEN}To add more clients:${NC}"
echo "  1. Generate new keys: wg genkey | tee clientX_private.key | wg pubkey | tee clientX_public.key"
echo "  2. Add peer to ${WG_DIR}/${WG_INTERFACE}.conf"
echo "  3. Restart WireGuard: systemctl restart wg-quick@${WG_INTERFACE}"
echo ""
echo -e "${GREEN}Client configuration file content:${NC}"
cat ${CLIENT_CONFIG_FILE}

# Show WireGuard status
echo ""
echo -e "${GREEN}WireGuard Status:${NC}"
wg show
